The double arrow operator, “=>”, is used as an access mechanism for arrays. This means that what is on the left side of it will have a corresponding value of what is on the right side of it in array context. This can be used to set values of any acceptable type into a corresponding index of an array. The index can be associative (string based) or numeric.

<?php
$myArray = array(
 0 => 'Big',
 1 => 'Small',
 2 => 'Up',
 3 => 'Down'
 );
 ?>
The object operator, “->”, is used in object scope to access methods and properties of an object. It’s meaning is to say that what is on the right of the operator is a member of the object instantiated into the variable on the left side of the operator. Instantiated is the key term here.

  <?php
    $obj = new MyObject(); // Create a new instance of MyObject into $obj
    $obj->thisProperty = 'Fred'; // Set a property in the $obj object called thisProperty
    $obj->getProperty(); // Call a method of the $obj object named getProperty
    ?>


https://alias.io/2010/01/store-passwords-safely-with-php-and-mysql/


$username = 'Admin';
$password = 'gf45_gdf#4hg';

// A higher "cost" is more secure but consumes more processing power
$cost = 10;

// Create a random salt
$salt = strtr(base64_encode(mcrypt_create_iv(16, MCRYPT_DEV_URANDOM)), '+', '.');

// Prefix information about the hash so PHP knows how to verify it later.
// "$2a$" Means we're using the Blowfish algorithm. The following two digits are the cost parameter.
$salt = sprintf("$2a$%02d$", $cost) . $salt;

// Value:
// $2a$10$eImiTXuWVxfM37uY4JANjQ==

// Hash the password with the salt
$hash = crypt($password, $salt);
